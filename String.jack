// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int len, maxLen;
    field Array string;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
	if (maxLength > 0) {
	    let string = Array.new(maxLength);
	} else {
	    let string = Memory.alloc(1);
	}
	let len = 0;
	let maxLen = maxLength;
	return this;
    }

    /** Disposes this string. */
    method void dispose() {
	do string.dispose();
	do Memory.deAlloc(this);
	return;
    }

    /** Returns the current length of this string. */
    method int length() {
	return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
	if (j < len) {
	    return string[j];
	} else {
	    return 0;
	}
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
	if (j < len) {
	    let string[j] = c;
	}
	return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
	if (len < maxLen) {
	    let string[len] = c;
	    let len = len + 1;
	}
	return this;		// Check this
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
	if (len > 0) {
	    let string[len-1] = 0;
	    let len = len - 1;
	}
	return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
	var int sum, i, sign;
	let sum = 0;
	let i = 0;
	let sign = 1;
	if (string[i] = 45) {
	    let sign = -1;
	    let i = i + 1;
	}
	while ((i < len) & (string[i] > 47) & (string[i] < 58)) {
	    let sum = sum * 10 + string[i] - 48;
	    let i = i + 1;
	}
	return sign * sum;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
	var int lastDigit, i;
	var String reversed;
	var int c;

	let reversed = String.new(6);
	let len = 0;
	if (val < 0) {
	    do appendChar(45);
	    let val = -val;
	}

	while (val > 0) {
	    let c = val - (val / 10 * 10) + 48;
	    do reversed.appendChar(c);
	    let val = val / 10;
	}
	let i = 0;
	while (i < reversed.length()) {
	    do appendChar(reversed.charAt(reversed.length() - i - 1));
	    let i = i + 1;
	}
	return;
    }

    /** Returns the new line character. */
    function char newLine() {
	return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
	return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
	return 34;
    }
}
